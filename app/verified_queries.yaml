verified_queries:
- id: vq_top_agencies_premium
  name: Top Performing Agencies by Premium
  query_explanation: >
    This query calculates the total premium amount generated by each agency. 
    It joins the agencies, agents, and policies tables to aggregate premium amounts for active policies, then sorts them by total premium in descending order and limits result to 10 records.
  questions: 
    - Which agencies generate the most premium?
    - What are our top agencies by premium revenue?
    - Which agencies have the highest premium amounts?
    - Show me the agencies with the most premium
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Region filter: Can be added as "AND a.region = '[region]'" to filter by specific region - West, Midwest, Northeast and Southeast
        - Tier filter: Can be added as "AND a.tier = '[tier]'" to filter by agency tier - Gold, Silver, Bronze, Platinum
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Fields a.agency_id and a.agency_name must always be included in SELECT and GROUP BY
        - Fields a.region, a.city, a.state and a.tier can be removed for general result
        - Additional fields from agencies table can be added if available (city, state, establishment_date)
        
    4. GROUP BY modifications:
        - Any field added to or removed from SELECT should be correspondingly added to or removed from GROUP BY
        - Exception: Aggregate functions (SUM, COUNT, AVG) should not be in GROUP BY
        
    5. Result limiting:
        - LIMIT clause should be adjusted or removed based on needs
  sql: |
    SELECT 
      a.agency_id,
      a.agency_name,
      a.region,
      a.tier,
      COUNT(p.policy_id) AS policy_count,
      SUM(p.premium_amount) AS total_premium,
      AVG(p.premium_amount) AS avg_premium
    FROM 
      agencies a
      JOIN agents ag ON a.agency_id = ag.agency_id
      JOIN policies p ON ag.agent_id = p.agent_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      a.agency_id, a.agency_name, a.region, a.tier
    ORDER BY 
      total_premium DESC
    LIMIT 10;
  tables_used:
  - agencies
  - agents
  - policies
  follow_up:
    - vq_agency_performance_by_region
    - vq_agency_performance_by_tier
    - vq_top_agencies_avg_premium
    - vq_policy_type_performance
    - vq_claims_analysis_by_policy_type
    - vq_distribution_channel_performance
    - vq_agent_performance_report
  verified_at: 2025-04-15 10:00:00
  verified_by: data_analyst

- id: vq_distribution_channel_performance
  name: Distribution Channel Performance Analysis
  query_explanation: >
    This query analyzes the performance of different distribution channels by measuring total premium, policy count, 
    and average premium per policy for each channel. Only active policies are included, and the results are ordered by total premium.
  questions:
    - How are our different distribution channels performing?
    - Which distribution channels generate the most premium?
    - Compare performance across distribution channels
    - Show me channel performance by premium
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Channel type filter: Can be added as "AND dc.channel_type = '[type]'" to filter by specific channel types
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Fields dc.channel_id, dc.channel_name, and dc.channel_type must always be included in SELECT and GROUP BY
        - Commission-related calculations can be removed if not needed
        
    4. GROUP BY modifications:
        - Any field added to or removed from SELECT should be correspondingly added to or removed from GROUP BY
        - Exception: Aggregate functions (SUM, COUNT, AVG) should not be in GROUP BY
        
    5. Analysis options:
        - To focus on commission metrics, include commission_rate and estimated_commission fields
        - To analyze growth, add a date grouping by adding p.start_date (by month or quarter) to both SELECT and GROUP BY
  sql: |
    SELECT 
      dc.channel_id,
      dc.channel_name,
      dc.channel_type,
      COUNT(p.policy_id) AS policy_count,
      SUM(p.premium_amount) AS total_premium,
      AVG(p.premium_amount) AS avg_premium_per_policy,
      SUM(p.premium_amount * dc.commission_rate / 100) AS estimated_commission
    FROM 
      distribution_channels dc
      JOIN policies p ON dc.channel_id = p.channel_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      dc.channel_id, dc.channel_name, dc.channel_type
    ORDER BY 
      total_premium DESC;
  tables_used:
  - distribution_channels
  - policies
  follow_up:
    - vq_top_agencies_premium
    - vq_channel_growth_over_time
    - vq_channel_commission_analysis
    - vq_policy_type_by_channel
  verified_at: 2025-04-15 14:30:00
  verified_by: data_analyst

- id: vq_agent_performance_report
  name: Agent Performance Report
  query_explanation: >
    This query provides a performance report for agents, including their agency, certification level, 
    number of policies sold, total premium, and revenue impact. It only includes active agents and their active policies.
  questions:
    - How are our agents performing in terms of sales?
    - Which agents generate the most premium?
    - Who are our top performing agents?
    - Show me agent sales performance
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Agent status: Can be modified to 'active' or 'inactive' using values from comments
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Agency filter: Can be added as "AND a.agency_id = [id]" to filter by specific agency
        - Certification level filter: Can be added as "AND ag.certification_level = '[level]'" to filter by certification
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Fields ag.agent_id, ag.agent_name must always be included in SELECT and GROUP BY
        - Agency information can be expanded or reduced based on needs
        - Experience-related fields can be added (ag.hire_date, ag.experience_years)
        
    4. GROUP BY modifications:
        - Any field added to or removed from SELECT should be correspondingly added to or removed from GROUP BY
        - Exception: Aggregate functions (SUM, COUNT, AVG) should not be in GROUP BY
        
    5. Sorting options:
        - Default is by total_premium, but can be changed to policies_sold or total_revenue_impact
        - Direction can be changed from DESC to ASC if needed
  sql: |
    SELECT 
      ag.agent_id,
      ag.agent_name,
      a.agency_name,
      ag.certification_level,
      COUNT(p.policy_id) AS policies_sold,
      SUM(p.premium_amount) AS total_premium,
      SUM(p.annual_revenue_impact) AS total_revenue_impact
    FROM 
      agents ag
      JOIN agencies a ON ag.agency_id = a.agency_id
      JOIN policies p ON ag.agent_id = p.agent_id
    WHERE 
      ag.status = 'active' -- active, inactive
      AND p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      ag.agent_id, ag.agent_name, a.agency_name, ag.certification_level
    ORDER BY 
      total_premium DESC;
  tables_used:
  - agents
  - agencies
  - policies
  follow_up:
    - vq_top_agencies_premium
    - vq_agent_certification_performance
    - vq_agent_experience_impact
    - vq_policy_type_by_agent
  verified_at: 2025-04-15 15:45:00
  verified_by: data_analyst

- id: vq_claims_analysis_by_policy_type
  name: Claims Analysis by Policy Type
  query_explanation: >
    This query analyzes claims data grouped by policy type, showing total claim amount, average claim amount, 
    claim frequency, and loss ratio. The loss ratio is calculated as (total claim amount / total premium) for each policy type.
  questions:
    - What are our loss ratios by policy type?
    - How do claims vary by policy type?
    - Which policy types have the highest claim rates?
    - Show me claim analysis by policy type
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Claim status filter: Can be added as "AND c.claim_status = '[status]'" to filter specific claim statuses
        - Policy type filter: Can be added as "AND p.policy_type = '[type]'" to filter specific policy types
        
    2. Time period:
        - For policy period: "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - For claim period: "AND c.claim_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Field p.policy_type must always be included in SELECT and GROUP BY
        - Calculation fields can be removed if not needed
        - Deductible-related fields can be added if needed
        
    4. GROUP BY modifications:
        - If other dimensions are added (region, agency tier, etc.), they must be included in both SELECT and GROUP BY
        
    5. Additional analyses:
        - For severity analysis, focus on avg_claim_amount
        - For frequency analysis, focus on claim_frequency
        - For profitability, focus on loss_ratio_percent
        - Sorting can be changed based on analysis focus
  sql: |
    SELECT 
      p.policy_type,
      COUNT(p.policy_id) AS policy_count,
      SUM(p.premium_amount) AS total_premium,
      COUNT(c.claim_id) AS claim_count,
      SUM(c.claim_amount) AS total_claim_amount,
      AVG(c.claim_amount) AS avg_claim_amount,
      COUNT(c.claim_id)::float / COUNT(p.policy_id) AS claim_frequency,
      CASE 
        WHEN SUM(p.premium_amount) > 0 THEN 
          SUM(c.claim_amount) / SUM(p.premium_amount) * 100
        ELSE 0
      END AS loss_ratio_percent
    FROM 
      policies p
      LEFT JOIN claims c ON p.policy_id = c.policy_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      p.policy_type
    ORDER BY 
      loss_ratio_percent DESC;
  tables_used:
  - policies
  - claims
  follow_up:
    - vq_claim_trend_analysis
    - vq_high_value_claims
    - vq_claims_by_region
    - vq_policy_type_performance
  verified_at: 2025-04-16 09:15:00
  verified_by: data_analyst

- id: vq_agency_performance_by_region
  name: Regional Agency Performance
  query_explanation: >
    This query analyzes agency performance by region, showing the number of agencies, average premium per agency, 
    total premium, and policy count for each region. The results are sorted by total premium in descending order.
  questions:
    - How are our agencies performing by region?
    - Which regions generate the most premium?
    - Compare agency performance across regions
    - Show me regional performance metrics
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Region filter: Can be added as "AND a.region = '[region]'" to filter specific region
        - Agency tier filter: Can be added as "AND a.tier = '[tier]'" to filter by agency tier
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Field a.region must always be included in SELECT and GROUP BY
        - Additional geographic fields (state, city) can be added for more detailed analysis
        - Agency tiers can be included by adding a.tier to both SELECT and GROUP BY
        
    4. GROUP BY modifications:
        - If other dimensions are added (tier, etc.), they must be included in both SELECT and GROUP BY
        
    5. Result variations:
        - To analyze agency count distribution, sort by agency_count
        - To analyze efficiency, sort by avg_premium_per_agency
        - To analyze market penetration, include and sort by policy_count
  sql: |
    SELECT 
      a.region,
      COUNT(DISTINCT a.agency_id) AS agency_count,
      SUM(p.premium_amount) AS total_premium,
      SUM(p.premium_amount) / COUNT(DISTINCT a.agency_id) AS avg_premium_per_agency,
      COUNT(p.policy_id) AS policy_count
    FROM 
      agencies a
      JOIN agents ag ON a.agency_id = ag.agency_id
      JOIN policies p ON ag.agent_id = p.agent_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      a.region
    ORDER BY 
      total_premium DESC;
  tables_used:
  - agencies
  - agents
  - policies
  follow_up:
    - vq_top_agencies_premium
    - vq_agency_performance_by_tier
    - vq_region_growth_analysis
    - vq_claims_by_region
  verified_at: 2025-04-16 11:30:00
  verified_by: data_analyst

- id: vq_agency_performance_by_tier
  name: Agency Performance by Tier
  query_explanation: >
    This query analyzes agency performance by tier (Gold, Silver, Bronze, Platinum), showing the number of agencies, 
    total premium, average premium per agency, and policy count for each tier. The results are sorted by total premium.
  questions:
    - How are agencies performing by tier?
    - Which agency tier generates the most premium?
    - Compare performance across agency tiers
    - Do platinum agencies outperform other tiers?
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Tier filter: Can be added as "AND a.tier = '[tier]'" to filter specific tier
        - Region filter: Can be added as "AND a.region = '[region]'" to filter by specific region
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Field a.tier must always be included in SELECT and GROUP BY
        - Region can be included for regional tier analysis
        
    4. GROUP BY modifications:
        - If other dimensions are added (region, etc.), they must be included in both SELECT and GROUP BY
        
    5. Analysis variations:
        - For tier efficiency analysis, focus on avg_premium_per_agency
        - For tier penetration analysis, focus on policy_count
        - For tier representation, focus on agency_count
  sql: |
    SELECT 
      a.tier,
      COUNT(DISTINCT a.agency_id) AS agency_count,
      SUM(p.premium_amount) AS total_premium,
      SUM(p.premium_amount) / COUNT(DISTINCT a.agency_id) AS avg_premium_per_agency,
      COUNT(p.policy_id) AS policy_count
    FROM 
      agencies a
      JOIN agents ag ON a.agency_id = ag.agency_id
      JOIN policies p ON ag.agent_id = p.agent_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      a.tier
    ORDER BY 
      total_premium DESC;
  tables_used:
  - agencies
  - agents
  - policies
  follow_up:
    - vq_top_agencies_premium
    - vq_agency_performance_by_region
    - vq_policy_type_by_tier
    - vq_claims_by_tier
  verified_at: 2025-04-16 13:45:00
  verified_by: data_analyst

- id: vq_top_agencies_avg_premium
  name: Top Agencies by Average Premium
  query_explanation: >
    This query identifies agencies with the highest average premium per policy, which may indicate agencies 
    focusing on high-value policies or premium market segments. Results are limited to top 10 agencies by default.
  questions:
    - Which agencies have the highest average premium per policy?
    - What agencies focus on high-value policies?
    - Show me agencies with the best premium per policy ratio
    - Rank agencies by average policy value
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Minimum policy count: Can add "HAVING COUNT(p.policy_id) >= [min_count]" for statistical relevance
        - Region filter: Can be added as "AND a.region = '[region]'" for regional analysis
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Fields a.agency_id and a.agency_name must always be included in SELECT and GROUP BY
        - Additional agency attributes can be added as needed
        
    4. Result limiting:
        - LIMIT clause can be adjusted or removed based on needs
        - Default is top 10, can be changed to any value
        
    5. Statistical relevance:
        - Consider adding HAVING clause to filter out agencies with too few policies
        - For example: "HAVING COUNT(p.policy_id) >= 10" for agencies with 10+ policies
  sql: |
    SELECT 
      a.agency_id,
      a.agency_name,
      a.region,
      a.tier,
      COUNT(p.policy_id) AS policy_count,
      SUM(p.premium_amount) AS total_premium,
      AVG(p.premium_amount) AS avg_premium_per_policy
    FROM 
      agencies a
      JOIN agents ag ON a.agency_id = ag.agency_id
      JOIN policies p ON ag.agent_id = p.agent_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      a.agency_id, a.agency_name, a.region, a.tier
    HAVING 
      COUNT(p.policy_id) >= 5  -- Ensure statistical relevance with minimum policies
    ORDER BY 
      avg_premium_per_policy DESC
    LIMIT 10;
  tables_used:
  - agencies
  - agents
  - policies
  follow_up:
    - vq_top_agencies_premium
    - vq_policy_type_performance
    - vq_high_value_policies
    - vq_agency_performance_by_tier
  verified_at: 2025-04-17 09:00:00
  verified_by: data_analyst

- id: vq_policy_type_performance
  name: Policy Type Performance Analysis
  query_explanation: >
    This query analyzes the performance of different policy types by measuring policy count, total premium, 
    average premium, and revenue impact. Results are sorted by total premium to identify top performing policy types.
  questions:
    - How are different policy types performing?
    - Which policy types generate the most premium?
    - Compare performance of different insurance products
    - What is our product mix by premium?
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Specific policy type: Can add "AND p.policy_type = '[type]'" to focus on one type
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Field p.policy_type must always be included in SELECT and GROUP BY
        - Risk score metrics can be added or removed based on analysis needs
        
    4. Dimensional analysis:
        - Can add region or channel dimensions by joining appropriate tables
        - Any dimension added must be included in both SELECT and GROUP BY
        
    5. Sorting options:
        - Default is by total_premium, but can be changed to policy_count, avg_premium, or roi_percent
        - Direction can be changed from DESC to ASC if needed
  sql: |
    SELECT 
      p.policy_type,
      COUNT(p.policy_id) AS policy_count,
      SUM(p.premium_amount) AS total_premium,
      AVG(p.premium_amount) AS avg_premium,
      SUM(p.annual_revenue_impact) AS total_revenue_impact,
      CASE 
        WHEN SUM(p.premium_amount) > 0 THEN 
          (SUM(p.annual_revenue_impact) / SUM(p.premium_amount)) * 100
        ELSE 0
      END AS roi_percent,
      AVG(p.risk_score) AS avg_risk_score
    FROM 
      policies p
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      p.policy_type
    ORDER BY 
      total_premium DESC;
  tables_used:
  - policies
  follow_up:
    - vq_claims_analysis_by_policy_type
    - vq_policy_type_by_channel
    - vq_policy_type_by_region
    - vq_high_value_policies
  verified_at: 2025-04-17 11:15:00
  verified_by: data_analyst

- id: vq_channel_growth_over_time
  name: Distribution Channel Growth Analysis
  query_explanation: >
    This query analyzes the growth of different distribution channels over time by showing policy count and premium 
    amounts by quarter. It helps identify which channels are growing, stable, or declining in performance.
  questions:
    - How are our distribution channels growing over time?
    - Which channels show the most growth?
    - Show me channel performance trends by quarter
    - How has channel mix evolved over time?
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Channel type: Can add "AND dc.channel_type = '[type]'" to focus on specific channel types
        
    2. Time period:
        - Default is to show all time data by quarter
        - Can modify to specific period: "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Can change granularity to month, year by modifying the date_trunc function
        
    3. Field selection:
        - date_trunc and dc.channel_name must be included in SELECT and GROUP BY
        - Can focus only on count or premium metrics by removing unnecessary columns
        
    4. Growth calculation:
        - By default, absolute numbers are shown
        - Advanced: Could add window functions for quarter-over-quarter growth percentage
        
    5. Visualization preparation:
        - This query is designed to be visualized as a line or bar chart
        - Ensure date_trunc is first column for proper time-series visualization
  sql: |
    SELECT 
      date_trunc('quarter', p.start_date) AS quarter,
      dc.channel_name,
      dc.channel_type,
      COUNT(p.policy_id) AS policy_count,
      SUM(p.premium_amount) AS total_premium
    FROM 
      distribution_channels dc
      JOIN policies p ON dc.channel_id = p.channel_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      quarter, dc.channel_name, dc.channel_type
    ORDER BY 
      quarter, dc.channel_name;
  tables_used:
  - distribution_channels
  - policies
  follow_up:
    - vq_distribution_channel_performance
    - vq_channel_commission_analysis
    - vq_policy_type_by_channel
    - vq_region_growth_analysis
  verified_at: 2025-04-17 14:30:00
  verified_by: data_analyst

- id: vq_channel_commission_analysis
  name: Distribution Channel Commission Analysis
  query_explanation: >
    This query analyzes commission payouts across different distribution channels, showing total premium, 
    commission rates, estimated commission amounts, and commission efficiency (commission as percentage of premium).
  questions:
    - How do commissions vary across distribution channels?
    - Which channels have the highest commission rates?
    - What is our commission expense by channel?
    - Compare commission efficiency across channels
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        - Commission threshold: Can add "HAVING SUM(p.premium_amount * dc.commission_rate / 100) > [amount]"
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Channel identification fields and commission metrics must be included
        - Can add channel_type grouping by including in both SELECT and GROUP BY
        
    4. Commission efficiency:
        - commission_percent field shows commission as percentage of premium
        - Can be used to identify high-cost distribution channels
        
    5. Sorting options:
        - Default is by total_commission (highest commission expense first)
        - Can change to commission_percent for efficiency analysis
        - Can change to commission_rate to see highest rate channels
  sql: |
    SELECT 
      dc.channel_id,
      dc.channel_name,
      dc.channel_type,
      COUNT(p.policy_id) AS policy_count,
      SUM(p.premium_amount) AS total_premium,
      dc.commission_rate,
      SUM(p.premium_amount * dc.commission_rate / 100) AS total_commission,
      (SUM(p.premium_amount * dc.commission_rate / 100) / SUM(p.premium_amount)) * 100 AS commission_percent
    FROM 
      distribution_channels dc
      JOIN policies p ON dc.channel_id = p.channel_id
    WHERE 
      p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      dc.channel_id, dc.channel_name, dc.channel_type, dc.commission_rate
    ORDER BY 
      total_commission DESC;
  tables_used:
  - distribution_channels
  - policies
  follow_up:
    - vq_distribution_channel_performance
    - vq_channel_growth_over_time
    - vq_policy_type_by_channel
    - vq_high_commission_policies
  verified_at: 2025-04-18 09:45:00
  verified_by: data_analyst

- id: vq_agent_certification_performance
  name: Agent Performance by Certification Level
  query_explanation: >
    This query analyzes agent performance metrics grouped by certification level, showing how different 
    certification levels correlate with sales performance, premium generation, and revenue impact.
  questions:
    - How do agents perform by certification level?
    - Does higher certification lead to better performance?
    - Compare agent metrics across certification levels
    - What's the performance impact of agent certification?
  instructions: >
    Modification guidelines:
    1. Filter conditions:
        - Agent status: Can be modified to 'active' or 'inactive' using values from comments
        - Policy status: Can be modified to 'active', 'lapsed', or 'cancelled' using values from comments
        
    2. Time period:
        - For specific time periods, add "AND p.start_date BETWEEN '[start_date]' AND '[end_date]'"
        - Use ISO format dates (YYYY-MM-DD)
        
    3. Field selection:
        - Certification level must always be included in SELECT and GROUP BY
        - Can include agent count and averages to compare performance profiles
        
    4. Per-agent metrics:
        - Include "AS avg_policies_per_agent" type metrics for normalized comparison
        - Helps determine if higher certification levels correlate with higher performance
        
    5. Sorting options:
        - Default is by certification_level for easy comparison
        - Can change to any performance metric to rank by performance
  sql: |
    SELECT 
      ag.certification_level,
      COUNT(DISTINCT ag.agent_id) AS agent_count,
      COUNT(p.policy_id) AS total_policies_sold,
      COUNT(p.policy_id) / COUNT(DISTINCT ag.agent_id) AS avg_policies_per_agent,
      SUM(p.premium_amount) AS total_premium,
      SUM(p.premium_amount) / COUNT(DISTINCT ag.agent_id) AS avg_premium_per_agent,
      SUM(p.annual_revenue_impact) AS total_revenue_impact,
      SUM(p.annual_revenue_impact) / COUNT(DISTINCT ag.agent_id) AS avg_revenue_per_agent
    FROM 
      agents ag
      JOIN policies p ON ag.agent_id = p.agent_id
    WHERE 
      ag.status = 'active' -- active, inactive
      AND p.status = 'active' -- active, lapsed, cancelled
    GROUP BY 
      ag.certification_level
    ORDER BY 
      ag.certification_level;
  tables_used:
  - agents
  - policies
  follow_up:
    - vq_agent_performance_report
    - vq_agent_experience_impact
    - vq_policy_type_by_agent
    - vq_top_agents_by_region
  verified_at: 2025-04-18 11:30:00
  verified_by: data_analyst